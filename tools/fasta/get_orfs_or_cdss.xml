<tool id="get_orfs_or_cdss" name="Get open reading frames (ORFs) or coding sequences (CDSs)" version="0.2.0">
    <description>e.g. to get peptides from ESTs</description>
    <requirements>
        <requirement type="package" version="1.65">biopython</requirement>
        <requirement type="python-module">Bio</requirement>
    </requirements>
    <stdio>
        <!-- Anything other than zero is an error -->
        <exit_code range="1:" />
        <exit_code range=":-1" />
    </stdio>
    <version_command interpreter="python">get_orfs_or_cdss.py --version</version_command>
    <command interpreter="python">
get_orfs_or_cdss.py -i $input_file -f $input_file.ext --table $table -t $ftype -e $ends -m $mode --min_len $min_len -s $strand --on $out_nuc_file --op $out_prot_file --ob $out_bed_file --og $out_gff3_file
    </command>
    <inputs>
        <param name="input_file" type="data" format="fasta,fastq,sff" label="Sequence file (nucleotides)" help="FASTA, FASTQ, or SFF format." />
        <param name="table" type="select" label="Genetic code" help="Tables from the NCBI, these determine the start and stop codons">
            <option value="1">1. Standard</option>
            <option value="2">2. Vertebrate Mitochondrial</option>
            <option value="3">3. Yeast Mitochondrial</option>
            <option value="4">4. Mold, Protozoan, Coelenterate Mitochondrial and Mycoplasma/Spiroplasma</option>
            <option value="5">5. Invertebrate Mitochondrial</option>
            <option value="6">6. Ciliate Macronuclear and Dasycladacean</option>
            <option value="9">9. Echinoderm Mitochondrial</option>
            <option value="10">10. Euplotid Nuclear</option>
            <option value="11">11. Bacterial</option>
            <option value="12">12. Alternative Yeast Nuclear</option>
            <option value="13">13. Ascidian Mitochondrial</option>
            <option value="14">14. Flatworm Mitochondrial</option>
            <option value="15">15. Blepharisma Macronuclear</option>
            <option value="16">16. Chlorophycean Mitochondrial</option>
            <option value="21">21. Trematode Mitochondrial</option>
            <option value="22">22. Scenedesmus obliquus</option>
            <option value="23">23. Thraustochytrium Mitochondrial</option>
            <option value="24">24. Pterobranchia Mitochondrial</option>
        </param>
        <param name="ftype" type="select" value="True" label="Look for ORFs or CDSs">
            <option value="ORF">Look for ORFs (check for stop codons only, ignore start codons)</option>
            <option value="CDS">Look for CDSs (with start and stop codons)</option>
        </param>
        <param name="ends" type="select" value="open" label="Sequence end treatment">
            <option value="open">Open ended (will allow missing start/stop codons at the ends)</option>
            <option value="closed">Complete (will check for start/stop codons at the ends)</option>
            <!-- TODO? Circular, for using this on finished bacteria etc -->
        </param>
        <param name="mode" type="select" label="Selection criteria" help="Suppose a sequence has ORFs/CDSs of lengths 100, 102 and 102 -- which should be taken? These options would return 3, 2 or 1 ORF.">
            <option value="all">All ORFs/CDSs from each sequence</option>
           ginal full length sequences, by appending a suffix.

The start and stop codons are taken from the `NCBI Genetic Codes
&lt;http://www.ncbi.nlm.nih.gov/Taxonomy/Utils/wprintgc.cgi&gt;`_.
When searching for ORFs, the sequences will run from stop codon to stop
codon, and any start codons are ignored. When searching for CDSs, the first
potential start codon will be used, giving the longest possible CDS within
each ORF, and thus the longest possible protein sequence. This is useful
for things like BLAST or domain searching, but since this may not be the
correct start codon, it may not be appropriate for signal peptide detection
etc.

**Example Usage**

Given some EST sequences (Sanger capillary reads) assembled into unigenes,
or a transcriptome assembly from some RNA-Seq, each of your nucleotide
sequences should (barring sequencing, assembly errors, frame-shifts etc)
encode one protein as a single ORF/CDS, which you wish to extract (and
perhaps translate into amino acids).

If your RNA-Seq data was strand specific, and assembled taking this into
account, you should only search for ORFs/CDSs on the forward strand.

**Citation**

If you use this Galaxy tool in work leading to a scientific publication please
cite the following paper:

Peter J.A. Cock, Björn A. Grüning, Konrad Paszkiewicz and Leighton Pritchard (2013).
Galaxy tools and workflows for sequence analysis with applications
in molecular plant pathology. PeerJ 1:e167
http://dx.doi.org/10.7717/peerj.167

This tool uses Biopython, so you may also wish to cite the Biopython
application note (and Galaxy too of course):

Cock et al (2009). Biopython: freely available Python tools for computational
molecular biology and bioinformatics. Bioinformatics 25(11) 1422-3.
http://dx.doi.org/10.1093/bioinformatics/btp163 pmid:19304878.

This tool is available to install into other Galaxy Instances via the Galaxy
Tool Shed at http://toolshed.g2.bx.psu.edu/view/peterjc/get_orfs_or_cdss
    </help>
    <citations>
        <citation type="doi">10.7717/peerj.167</citation>
        <citation type="doi">10.1093/bioinformatics/btp163</citation>
    </citations>
</tool>
