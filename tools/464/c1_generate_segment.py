#!/usr/bin/env python
import sys
import argparse
from datetime import date
from Bio import SeqIO
from Bio.Seq import Seq
from Bio.SeqRecord import SeqRecord
import random

import logging
logging.basicConfig(level=logging.INFO)
log = logging.getLogger(__name__)

sequence = Seq("""
GTGCACTTTTGCCATGATTGACAACCAATCAACAAAGTATGTGGGCTGAACTCAATCAGG
GTTTAATCCCCAACATACACATGACAATGGAAGTACCGTACCATTGATACTACCATTATA
GCATACTCTGTAATAGTTGTCAAACATTAATAGTTAATTCTCCCATTCTAAAACGATTTG
ATCGTTTATTTCTACAATTAGATGGACTCCATTTGTACCGAATGGATGGACTTGTAACTT
TATCGTACCATCTTTAAACATATTCGCAATATGTTCTTCTAACTCTGCACGCTTCATGAT
ATAACCCTCCTTATCAGATGTCAAATATAGTTTTCTCACGGCTCAACTCAAACCTATCAA
ACTTGTAACCCCTCGGCGCTTTATACTTAATCAACACACTAGCCGCATCCGTTCTACTAC
GTGCTGTCGTATCATAGCGCCTAACTACCCCATTGTCGTTAATAGAGAAGATAGTTACTA
GATAACTCATAGTACTTTATCCAACCTTAGTTTTATAATTTCATCAGCAGTGTTACCGTA
TAGAACCTCAAAGTCTGACAAACTCAGTCCCTTGTGGTACTCATAATACTGTTTACCGTC
ATCATCTTGAAGCAACATTGTCACATCGTATGAGTCAACAAAATCATTTTGCACCATGTG
GAGCACCTCCAAATAACACCTTTATAACCCATGTGGCGTAATCATTGTTTTCCATCCTAG
AAAGCTCATACAATGCGTTTTTCATGAGTTTATTTTCATGCTCTAGTTTAGTCATCTTCT
TTTCTAACTCAAGGTCTATCATCTTTAAGTCTCCGTCTACAGGTGCTATAATGCCTTGAT
TACCCCATTTAGAGTTTTTCCATGTGCCTTCTAATCTCTTCTCTTGATCGAAGATTTTAC
CCATTACAAACATCTCCTTTTAAACAAACGTTTATTTGATTGTGAATGTGTCATCAACCA
GAACCACCCCGCCCGGCACTTGCACAGGCTTAGGCTTCATTTTCCGACTGAATCCGACTT
TGAAATTCTCAAACGTAACCTCTTTCTTAATCTTGTCAGTCATTCCCGCACATTTAACAC
TAAATTTTATATCAGTGTAATCATCTGGACTACCTTCTACTAACTTACCATCTACTTCTT
TCATATAGATGTCTTGTATATAGGTCTTCTGTCTCAGATATTTAGCTCTTTTGAATGTAC
TTTCATGTGCCCAGTATCCCAATTTCTTAGGGTCAACTATATCTTTTATTACATCAGGTA
TCTCTGTACCCGTTAAATGTATGCTGTCAGTATCACAGTATATTATCCGATCATAACAAG
CCTGTGCCGCTGTAATTGTCGTGTATCTAGCCCATGCAGTGATGAAAACGCCCATAGGTG
TATAAACAGGGTCTTTTGTTTCCTCTTCTCCAAGTCTGAAACCTAGCGCCCCATTCTCTT
TTAAATAAGGGACTTTCCCTGTAACATCAGGGTTACTAGCGAATTTACCGTATAGACTGT
TTAACATCAGTTTTGCTAGTTGCTTGATCGCTCCTTCTGATGTCGTCTTGATGTACGTCC
ATTTATCTATAAAATCTTTAAACAAACCTGTAGTTGCTTTAAATTTTAAGCCGCTGATAT
ATTCAACGTTATATAAATCGTAGTGTTCTTTCATTAATTCTAGGTCTACATTTGACAACC
AGAGGTCGGCTATCTCCCCGCCGCTACTTTTTAGGTACTCATTACCTTTATAAAACCTAC
TTCTTTTTATCTGTATAGTGGGTATATAGCCCTCTTTCAATTCGAACTCACATCTGATAT
GCTGTATGTGTAGTGGGTAATCTTCGTCCCAAACGTATTTACCCTCGAATACTATAGGTT
CACCATATGGAAGGAGACGGCTATACATCTGTGCAGGATATAGACTATTAACATCGAAGA
CCATGCCTTCTCCGATTTCTTTTTCTTTGAACCTATCATTTAACCATGTAAAACCACCTC
TATAGGCGTATCTCACTTCCTTATCGAGTCCAAGACTCAATGTAGGAAACACCTTTTTGA
ATTTCTTAGTGGTTATAATATCCTTGAAACCTTTTAGACTGTCACTGCCTGCTGTCATCC
GGTCTAAACCTTGCTTAAACTGAATTAACAGAGCTTCCGCAATAATCTGAATATCGTTTT
TAATATAGGCGTATTCTTCGGGTGTTATCTTATAGCCGACTGGTCTTTCTTTGTGGTAAT
CAATATCACCTTTAAGAACAGTTAGTTTAAAGTCTTTAGCTATCTTCTTAACAGGAAACG
GTAGTTTCTTTAAGCTGTCATATATCACTGTATGTATCTTACGTTTCCCTTTGTAGCCTA
AACATATATCAATCATGTACCATTGTCCCATGCGAGATATGATCGTATTATATGTGTTTG
GCAATCCGTCAGCCGACCACTTAAAACCATTACGTTCCAACCAGTTAATGATAAAAGCTC
CGTCAAATTTGAGGTTATGGAAATATAGATCAGCTTGTACCTTCAACACCCACGCCATAA
ACTCATCCAGGCTATTACCTATTTTGTACTCACTGTGATCTTCTATATTCATATAACCAT
ACGCCCATACCCTACAGTCTTCCACTTTAGTAGTTGTCTCAAAGTCACAACTATACATCT
TTCTCGGCATATGCTTCATCCTTTAACGGAGCCTAGAACCCCTTTAAGCTTAGATCAAAG
TCACCCCTTCGATACTGTTCCAAGTATGACAGTATTTTATATACATTACCTTCTACGTTC
TCCACTGTGTTTCCCTCACTATCAAATTCCTCAAAGGATATTTCTGATATTCTGAGAAAC
AATTCATAGAAGTCATCAGGAGGTATCTTTTTTAATTCTTCGATCAGTTCATCTGCCGCA
TCAAATGAATTGAAACTACCCTCAACGCTCTTAATAAAGTTTAACTGTAACTGTATCATT
TTCTTTTCATAATACTGAGGGTCTGTTCTCATCTCCATGCTTTCTTCTAGGGTTCGCAAA
CGGCTATAGCTTCGCACCTTGCTAAAGTCAAAATCATGGGGTCTATTAATTCCTGTAACG
TGTGCAGGACTTGTCATAGCTATCCGTTGTTCAATTGTCCCTTGCGGCTTACCGCCTGCA
TAGTATTCTTTGTCTTTCATAGCCTTGATTTTCTCATCTACTAACCGCTGAACCTCTTTT
GTGTTACGTTCAATCTCAGCTATCTTAGCTTTACTAGCCACCACACCGTATGCATTCTTT
TCGAACTGATAACGCATATTAGCACGGTTAGTGAAAGAGGACGCTTGTTCCTTCCACTTA
TTGAACTGCGCCCGTGTTTCAAATGAATCAAGGTCAGGTATATCAATTTCAGCGGTAAGG
TCTACACCATACTTTTTCTTCGTTCTCGCAATCTTGGCTTTTGTATTCTTGACCAATCGA
GCGTATTCGGCTTTGTCATTATCCTTAATGCGTATACGTGGACTTCTCGCCATGTTGCGT
TATCTCCTTTCAACCAAGCATGGAAACCACGCTTTTCAACTTCTGAATAGAACGTGATGT
CTGCGAGCATATCCATATTCCACGGTGTAACAGCGACCCGTTCTATCTTCTTATTAAATT
TCTTCCTGTATTCTTGGTATCCATCGAGAAACTTGTTCAAATACAATTCACTTGAAAAGA
AAAACGTGACATCGGTGTTAGATGCCACGTATTCAGATTCCTTCAAGTTATGATAGATAC
CTCTTTGTGTTTTAGGCATCTATATTTTACCTCCTGTTTATAGGGATAGTTGTAAGCTAA
AGAATACGTTACCTTTACTAGATGTTCCTTGAACCACTTTAACCTTAAACGTTTCAAGCT
TATGACGAGTCACAAGGTCAATTAAGTCAGATGCGGCTTCTGCTACAGTCTTAGAGATAG
CGGAATATAACGACCCGTCAGCCGCAAAAATAGTAGTAACTGTTTCTTCCTTAGCGTCCC
CGTATGTATCGGACACTTGCTTATATTGAGCAATGGCGTTGGCTTCTATAATTGTTCCAT
CTGGAAGGTTTTTAAAAGATTGTCCGCCGCCTGTCTGAGCATTAAAGATTTTGATTTGTC
CTTCAAGAGTTTCTGTGTCAAAAGTAGCCTTTA
""".replace('\n', ''))

def generate_sequence(user_email):
    user_email = user_email[0:user_email.index('@')]
    today = date.today()
    sequence_id = '464.{0}-{1}-{2}.c1.{3}'.format(
        today.year,
        today.month,
        random.randint(1, 1000),
        user_email
    )
    return SeqRecord(
        sequence,
        id=sequence_id,
        description='',
    )

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='verify against expectations')
    parser.add_argument('user_email', help='User email')
    args = parser.parse_args()

    SeqIO.write(generate_sequence(**vars(args)), sys.stdout, 'fasta')
